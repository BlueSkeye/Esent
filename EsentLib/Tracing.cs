using System.Diagnostics;
using System.Runtime.CompilerServices;

using EsentLib.Jet;

namespace EsentLib
{
    internal static class Tracing
    {
        internal static TraceSwitch Tracer
        {
            get { return TraceSwitch; }
        }

        /// <summary>Trace an error generated by a call to ESENT.</summary>
        /// <param name="err">The error to trace.</param>
        [Conditional("TRACE")]
        private static void TraceError(int err)
        {
            if (0 == err) { Tracing.TraceVerboseLine("JET_err.Success"); }
            else if (err > 0) { Tracing.TraceWarnningLine(unchecked((JET_wrn)err).ToString()); }
            else { Tracing.TraceErrorLine(unchecked((JET_err)err).ToString()); }
        }

        internal static void TraceErrorLine(string message)
        {
            Trace.WriteLineIf(Tracer.TraceError, message);
        }

        /// <summary>Trace a call to an ESENT function.</summary>
        /// <param name="function">The name of the function being called.</param>
        [Conditional("TRACE")]
#if DEBUG
        // Disallow inlining so we can always get the name of the calling function.
        [MethodImpl(MethodImplOptions.NoInlining)]
#endif
        internal static void TraceFunctionCall(string function)
        {
#if DEBUG
            // Make sure the name of the calling function is correct.
            var stackTrace = new StackTrace();
            Debug.Assert(stackTrace.GetFrame(1).GetMethod().Name == function,
                "Incorrect function name", function);
#endif // DEBUG
            Trace.WriteLineIf(TraceSwitch.TraceInfo, function);
        }

        internal static void TraceInfoLine(string message)
        {
            Trace.WriteLineIf(Tracer.TraceInfo, message);
        }

        /// <summary>Can be used to trap ESENT errors.</summary>
        /// <param name="err">The error being returned.</param>
        /// <returns>The error.</returns>
        internal static int TraceResult(int err)
        {
            TraceError(err);
            return err;
        }

        internal static void TraceVerboseLine(string message)
        {
            Trace.WriteLineIf(Tracer.TraceVerbose, message);
        }
    
        internal static void TraceWarnningLine(string message)
        {
            Trace.WriteLineIf(Tracer.TraceWarning, message);
        }

        /// <summary>API call tracing.</summary>
        private static readonly TraceSwitch TraceSwitch =
            new TraceSwitch("ESENT P/Invoke", "P/Invoke calls to ESENT");
    }
}
